
(in-package :demon-of-the-fall)

(defun debugging-line-draw (point-1 point-2 origin)
  (multiple-value-bind (x1 y1)
      (iso-project-point (iso-point-translate point-1 origin))
    (incf x1 (car *camera*))
    (incf y1 (cdr *camera*))
    (when (minusp x1) (setf x1 0))
    (when (minusp y1) (setf y1 0))
    (multiple-value-bind (x2 y2)
	(iso-project-point (iso-point-translate point-2 origin))
      (incf x2 (car *camera*))
      (incf y2 (cdr *camera*))
      (when (minusp x2) (setf x2 0))
      (when (minusp y2) (setf y2 0))
      (draw-line x1 y1 x2 y2 255))))

(defun draw-bottom-cursor (box)
  (let* ((x (iso-point-x (box-dimensions box)))
	 ;(y (- (iso-point-y (box-dimensions box))))
	 (z (iso-point-z (box-dimensions box)))
	 (pos (box-position box)))
    ;; back
    (debugging-line-draw #i(0 0 z) #i(0 0 0) pos)
    (debugging-line-draw #i(0 0 z) #i(x 0 z) pos)
    (debugging-line-draw #i(0 0 0) #i(x 0 0) pos)
    (debugging-line-draw #i(x 0 0) #i(x 0 z) pos)))

(defun draw-top-cursor (box)
  (let* ((x (iso-point-x (box-dimensions box)))
	 (y (iso-point-y (box-dimensions box)))
	 (z (iso-point-z (box-dimensions box)))
	 (pos (box-position box)))
    ;; back
    (debugging-line-draw #i(0 y z) #i(0 y 0) pos)
    (debugging-line-draw #i(0 y z) #i(x y z) pos)
    (debugging-line-draw #i(0 y 0) #i(x y 0) pos)
    (debugging-line-draw #i(x y 0) #i(x y z) pos)))

(defun draw-debug-box (box &key partial)
  (let* ((x (iso-point-x (box-dimensions box)))
	 (y (iso-point-y (box-dimensions box)))
	 (z (iso-point-z (box-dimensions box)))
	 (pos (box-position box)))
    ;; back
    (unless partial
      (debugging-line-draw #i(x y z) #i(x y 0) pos)
      (debugging-line-draw #i(x y 0) #i(x 0 0) pos)
      (debugging-line-draw #i(0 y 0) #i(x y 0) pos)
      (debugging-line-draw #i(0 0 0) #i(x 0 0) pos)
      (debugging-line-draw #i(x 0 z) #i(x 0 0) pos))
    ;; front
    (debugging-line-draw #i(0 0 z) #i(0 0 0) pos)
    (debugging-line-draw #i(0 0 0) #i(x 0 0) pos)
    (debugging-line-draw #i(0 y z) #i(0 y 0) pos)
    (debugging-line-draw #i(0 y 0) #i(x y 0) pos)

    (debugging-line-draw #i(0 0 0) #i(0 y 0) pos)
    (debugging-line-draw #i(0 0 z) #i(0 y z) pos)
    (debugging-line-draw #i(x 0 0) #i(x y 0) pos)

    (debugging-line-draw #i(0 y z) #i(x y z) pos)
    (debugging-line-draw #i(x y 0) #i(x y z) pos)))

(defun draw-back-of-actor-box (actor)
  (let* ((pos (copy-iso-point (actor-position actor)))
	 (box (box-dimensions (actor-box actor)))
	 (x (iso-point-x box))
	 (y (iso-point-y box))
	 (z (iso-point-z box)))
    ;; back
    (debugging-line-draw #i(x y z) #i(x y 0) pos)
    (debugging-line-draw #i(x y 0) #i(x 0 0) pos)
    (debugging-line-draw #i(0 y 0) #i(x y 0) pos)
    (debugging-line-draw #i(0 0 0) #i(x 0 0) pos)
    (debugging-line-draw #i(x 0 z) #i(x 0 0) pos)))

(defun draw-front-of-actor-box (actor)
  (let* ((pos (copy-iso-point (actor-position actor)))
	 (box (box-dimensions (actor-box actor)))
	 (x (iso-point-x box))
	 (y (iso-point-y box))
	 (z (iso-point-z box)))
    ;; front
    (debugging-line-draw #i(0 y z) #i(0 0 z) pos)
    (debugging-line-draw #i(x y z) #i(0 y z) pos)
    (debugging-line-draw #i(x 0 z) #i(0 0 z) pos)
    (debugging-line-draw #i(x y z) #i(x 0 z) pos)
    (debugging-line-draw #i(0 y 0) #i(0 y z) pos)
    (debugging-line-draw #i(0 y 0) #i(0 0 0) pos)
    (debugging-line-draw #i(0 0 0) #i(0 0 z) pos)))


#+nil(defun draw-triangle (xs ys lr lg lb fr fg fb)
  (let ((cover 0))
    (maplist (lambda (x)
	       (incf (car x) (car *camera*))
	       (when (minusp (car x))
		 (setf (car x) 0)
		 (incf cover))
	       (when (> (car x) (1- (display-width)))
		 (setf (car x) (1- (display-width)))
		 (incf cover)))
	     xs)
    (maplist (lambda (y)
	       (incf (car y) (cdr *camera*))
	       (when (minusp (car y))
		 (setf (car y) 0)
		 (incf cover))
	       (when (> (car y) (1- (display-height)))
		 (setf (car y) (1- (display-height)))
		 (incf cover)))
	     ys)

    (unless (> cover 2)
      #+nil(draw-filled-triangle *vbuffer* (first xs) (first ys)
				 (second xs) (second ys) (third xs) (third ys)
				 fr fg fb)
      #+nil(draw-triangle *vbuffer* (first xs) (first ys)
			  (second xs) (second ys) (third xs) (third ys)
			  lr lg lb))))
