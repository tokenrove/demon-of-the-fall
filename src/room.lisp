
(in-package :demon-of-the-fall)

(defclass blueprint (equinox:blueprint)
  ((exits :initarg :exits)
   (actors :initarg :actors)
   (player-spawn :initarg :player-spawn)
   (name :initarg :name)))

(defun blueprint-from-alist (alist)
  (make-instance 'blueprint
                 :floor (cdr (assoc :floor (cdr alist)))
                 :blocks (cdr (assoc :blocks (cdr alist)))
                 :actors (cdr (assoc :actors (cdr alist)))
                 :player-spawn (cadr (assoc :player-spawn (cdr alist)))
                 :exits (cdr (assoc :exits (cdr alist)))
                 :name (cdr (assoc :name (cdr alist)))))

(defclass room (equinox:room)
  ((exits :accessor exits-of)
   (player-spawn :accessor player-spawn-of)))

(defclass exit ()
  ((goes-to)
   (comes-from))
  (:documentation "A link between two ROOMs."))

(defclass spawn ()
  ((archetype)
   (initial-state)
   (predicate))
  (:documentation "A predicated birther of ACTORs."))

(defmethod initialize-instance :after ((room room) &key)
  (with-slots (exits player-spawn) (equinox:blueprint-of room)
    (setf (exits-of room) exits)
    (setf (player-spawn-of room) player-spawn)))

(defun load-room (name &key (spawn-actors-p t))
  (let* ((arch (cdr (assoc name '((:GATE-ROOM (:EXITS ((0 . 4) :KEY-ROOM (5 . 0)))
                                         (:NAME . "gate test room")
                                         (:ACTORS (:IRON-GATE (300 30 400) 42))
                                         (:FLOOR
                                          . #2A((2 2 2 2 2 2 2 2)
                                                (2 6 0 6 0 6 6 2)
                                                (2 6 6 6 6 6 6 2)
                                                (2 6 6 6 6 6 6 2)
                                                (2 0 0 0 0 0 0 2)
                                                (2 6 6 4 6 6 6 2)
                                                (2 6 6 6 6 6 6 2)
                                                (2 2 2 2 2 2 2 2))))
                                        (:KEY-ROOM
                                         (:EXITS ((0 . 0) :TEST-ROOM-B (6 . 5)) ((5 . 0) :GATE-ROOM (0 . 4)))
                                         (:BLOCKS)
                                         (:ACTORS (:IRON-KEY (64 30 64) 42))
                                         (:NAME . "key room")
                                         (:FLOOR
                                          . #2A((1 0 0 0 0 1 0 0)
                                                (1 1 1 1 1 1 1 1)
                                                (1 0 0 0 0 1 0 0)
                                                (1 0 6 6 0 1 0 0)
                                                (1 0 6 6 0 1 0 0)
                                                (1 0 0 0 0 1 0 0)
                                                (1 1 1 1 1 1 0 0)
                                                (1 0 0 0 0 0 0 0)
                                                (1 0 2 2 1 1 0 0)
                                                (1 0 0 0 0 1 0 0)
                                                (1 1 1 1 1 1 0 0)
                                                (1 0 0 0 0 0 0 0)
                                                (1 0 0 0 0 0 0 0)
                                                (1 0 0 0 0 0 0 0)
                                                (9 9 6 6 6 6 6 6))))
                                        (:TEST-ROOM-A (:NAME . "Test Room A")
                                         (:FLOOR
                                          . #2A((0 0 0 1 0 0 0)
                                                (0 0 1 1 1 0 0)
                                                (0 1 1 1 1 1 0)
                                                (0 0 1 1 1 0 0)
                                                (0 0 1 1 1 0 0)
                                                (1 1 1 1 1 1 1)
                                                (1 1 1 1 1 1 1)
                                                (0 0 1 1 1 0 0)
                                                (0 0 0 0 0 0 0)))
                                         (:BLOCKS (9 4 0 4) (9 4 0 5) (7 4 2 4))
                                         (:ACTORS (:FLOAT-BLOCK (256 64 384) 42))
                                         (:EXITS (:FLOOR :TEST-ROOM-A :CEILING)
                                          ((3 . 0) :TEST-ROOM-B (3 . 8))
                                          ((0 . 5) :MAZE-ROOM (0 . 0)))
                                         (:PLAYER-SPAWN (256 0 384)))
                                        (:TEST-ROOM-B (:BLOCKS)
                                         (:NAME . "Test Room B")
                                         (:FLOOR
                                          . #2A((0 0 0 0 0 0 0)
                                                (0 1 1 1 1 1 0)
                                                (0 1 1 1 1 1 0)
                                                (0 1 1 1 1 1 0)
                                                (0 1 1 1 1 1 0)
                                                (0 1 1 1 1 1 2)
                                                (0 1 1 1 1 1 0)
                                                (0 1 1 1 1 1 0)
                                                (0 0 0 1 0 0 0)))
                                         (:EXITS ((3 . 8) :TEST-ROOM-A (3 . 0))
                                          ((6 . 5) :KEY-ROOM (0 . 0)))
                                         (:ACTORS (:APPLE (64 0 64) 42))
                                         (:PLAYER-SPAWN (192 0 512)))))))
         (blueprint (blueprint-from-alist arch))
         (room (make-instance 'room :blueprint blueprint)))
    #+(or) (when spawn-actors-p
             (dolist (actor (cdr (assoc :actors (cdr archetype))))
               (add-actor-to-room room
                                  (spawn-actor-from-archetype room
                                                              (first actor)
                                                              (iso-point-from-list (second actor))))))
    room))

(defmethod paint :after ((room room) (camera equinox:camera))
  ;; draw exits
  (loop for exit in (exits-of room)
	when (consp (first exit))
	do (destructuring-bind (x . z) (first exit)
	     (when (minusp (1- x))
               (draw-exit camera exit t nil))
	     (when (minusp (1- z))
               (draw-exit camera exit nil nil))
	     (when (= x (1- (width-of room)))
               (draw-exit camera exit t t))
	     (when (= z (1- (depth-of room)))
               (draw-exit camera exit nil t)))))

;;; XXX this is still kind of gross.
(defmethod equinox:notify (actor (room room) (what (eql :border-collision)) &key at)
  (let ((x (equinox::iso-point-x at))
        (z (equinox::iso-point-z at)))
    (clampf x (1- (width-of room)) 0)
    (clampf z (1- (depth-of room)) 0)

    (loop for exit in (exits-of room)
          when (consp (first exit))
            do (destructuring-bind (exit-x . exit-z) (first exit)
                 (when (and (= x exit-x)
                            (= z exit-z)
                            (zerop (exit-counter-of actor)))
                   (setf (last-exit-taken-by actor) exit)
                   (return))))))

(defun check-room-change (actor)
  (when (plusp (exit-counter-of actor)) (decf (exit-counter-of actor)))
  (when (and (last-exit-taken-by actor) (zerop (exit-counter-of actor)))
    (setf (exit-counter-of actor) 61)
    (prog1 (last-exit-taken-by actor)
      (setf (last-exit-taken-by actor) nil))))

;; Draws triangles.  These could be more efficiently drawn as sprites,
;; but for the moment it doesn't matter too much.
(defun draw-exit (camera exit ex great)
  (multiple-value-bind (x1 y1)
      (iso-project-point #I((* equinox::+tile-size+ (+ (caar exit)
					      (if (and ex great) 1 0))) 0
			    (* equinox::+tile-size+ (+ (cdar exit)
					      (if (and (not ex) great) 1 0)))))
    (multiple-value-bind (x2 y2)
	(iso-project-point #I((* equinox::+tile-size+ (+ (caar exit)
						(if (and ex (not great)) 0 1)))
			      0
			      (* equinox::+tile-size+ (+ (cdar exit)
						(if (or ex great) 1 0)))))
      (multiple-value-bind (x3 y3)
	  (iso-project-point
	   #I((+ (* equinox::+tile-size+ (caar exit))
		 (cond ((and ex (not great)) (- (half equinox::+tile-size+)))
		       ((not ex) (half equinox::+tile-size+))
		       (t (+ equinox::+tile-size+ (half equinox::+tile-size+)))))
	      0
	      (+ (* equinox::+tile-size+ (cdar exit))
		 (cond (ex (half equinox::+tile-size+))
		       ((not great) (- (half equinox::+tile-size+)))
		       (t (+ equinox::+tile-size+ (half equinox::+tile-size+)))))))

        (let ((x (slot-value camera 'equinox::x))
              (y (slot-value camera 'equinox::y)))
          (incf x1 x)
          (incf x2 x)
          (incf x3 x)
          (incf y1 y)
          (incf y2 y)
          (incf y3 y))
	(fetus:draw-filled-triangle (list x1 x2 x3) (list y1 y2 y3) 150)
	(fetus:draw-triangle (list x1 x2 x3) (list y1 y2 y3) 64)))))

