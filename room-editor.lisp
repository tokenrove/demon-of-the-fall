
(in-package :vgdev-iso-cl)

;;;; EDITING COMPONENTS

(defun place-floor-tile (cursor tile)
  "Returns T if the floor was modified, NIL otherwise."
  (let ((orig-tile (aref (aref (room-floor *current-room*)
			       (floor (iso-point-z cursor) +tile-size+))
			 (floor (iso-point-x cursor) +tile-size+))))
    (unless (= tile orig-tile)
      ;; Note: assumes that version in *room-set* will get modified at
      ;; the same time, because it shares structure with room-floor,
      ;; thanks to being a vector.  Not that this matters too much.
      (setf (aref (aref (room-floor *current-room*)
			(floor (iso-point-z cursor) +tile-size+))
		  (floor (iso-point-x cursor) +tile-size+)) tile)
      t)))

(defun remove-block (cursor)
  "Returns T if the room was modified (if there was an actor at the
cursor point, NIL otherwise."
  (let* ((point-list (mapcar (lambda (x y) (floor x y))
			     (iso-point-list cursor)
			     (list +tile-size+ *slice-height-increment*
				   +tile-size+)))
	 (actor (gethash point-list *room-block-actors*))
	 (archblocks (assoc :blocks (room-archetype *current-room*))))
    (when actor
      (remhash point-list *room-block-actors*)
      (remove-sprite (actor-sprite actor))
      (setf (cdr archblocks)
	    (delete-if #'(lambda (x) (equal point-list (cdr x)))
		       (cdr archblocks)))
      (setf (room-blocks *current-room*) (cdr archblocks))
      t)))


;; as above.
(defun place-block (cursor tile)
  (let* ((block (append (list tile)
			(mapcar (lambda (x y) (floor x y))
				(iso-point-list cursor)
				(list +tile-size+ *slice-height-increment*
				      +tile-size+))))
	 (actor (gethash (cdr block) *room-block-actors*))
	 (archblocks (assoc :blocks (room-archetype *current-room*))))
    ;; XXX really, should check if actor is same as our tile, return
    ;; NIL if so.
    (when actor (remove-block cursor))
    
    (push block (cdr archblocks))
    (setf (room-blocks *current-room*) (cdr archblocks))
    (give-block-sprite block)
    t))


;;;; HIGH-LEVEL ROUTINES

(defun room-editor (room-to-edit)
  "Interactive level editor on the current display, affecting the
given ROOM.  Note that the display must already have been created."
  (font-init)
  (load-default-font "pph.ttf" 18)
  (initialize-tiles)
  (create-sprite-manager)
  (load-room room-to-edit)

  (let ((entry-mode :blocks)
	(slice-cursor (make-iso-point))
	(cursor-box (make-box :dimensions #I(+tile-size+ 16 +tile-size+)))
	(cur-tile 1)
	(dirty-floor-p nil)
	(unsaved-changes-p nil)
	(output-file "rooms-edit-test.sexp"))
    (loop
     (let ((event (get-key-event)))
       ;; mode events; please excuse the silly hardcoded SDL keysyms.
       (cond ((= event (char-code #\q))
	      (when (or (not unsaved-changes-p)
			(editor-yes-no-prompt
			 "Unsaved changes - really quit? (Y/N)"))
		(return)))
	     ((= event (char-code #\a))
	      (unless (eql entry-mode :actors)
		(setf entry-mode :actors)
		(editor-osd-display-message "Actors mode.")))
	     ((= event (char-code #\s))
	      (unless (eql entry-mode :blocks)
		(setf entry-mode :blocks)
		(editor-osd-display-message "Blocks mode.")))
	     ((= event (char-code #\p)) (setf cur-tile (palette-mode)))
	     ((= event (char-code #\w))
	      (when (editor-yes-no-prompt "Really write changes? (Y/N)")
		(with-open-file (stream output-file
					:direction :output
					:if-exists :supersede)
		  (princ ";; -*- Lisp -*-" stream)
		  (princ #\Newline stream)
		  (princ ";; This file generated by room-editor.lisp." stream)
		  (print *room-set* stream))
		(setf unsaved-changes-p nil)
		(editor-osd-display-message "Written to ~A." output-file)))
	     ((= event (char-code #\r))
	      (when (editor-yes-no-prompt
		     (if unsaved-changes-p
			 "Really re-read data? (you have unsaved changes!)"
			 (format nil "Read map data from ~A?" output-file)))
		(initialize-room-data output-file)
		(load-room room-to-edit)
		(setf unsaved-changes-p t)
		(editor-osd-display-message "Room data freshly read from ~A."
					    output-file)))
	     ;; slice events
	     ((= event (char-code #\-))
	      (unless (< (iso-point-y slice-cursor) 0)
		(if (= (iso-point-y slice-cursor) 0)
		    (setf (iso-point-y slice-cursor) -16)
		    (decf (iso-point-y slice-cursor)
			  *slice-height-increment*))))
	     ((= event (char-code #\=))
	      (unless (> (iso-point-y slice-cursor) *room-highest-point*)
		(if (= (iso-point-y slice-cursor) -16)
		    (setf (iso-point-y slice-cursor) 0)
		    (incf (iso-point-y slice-cursor)
			  *slice-height-increment*))))
	     ((= event 273)
	      (unless (>= (ceiling (iso-point-x slice-cursor) +tile-size+)
			  (1- (room-width)))
		(incf (iso-point-x slice-cursor) +tile-size+)))
	     ((= event 274)
	      (unless (<= (iso-point-x slice-cursor) 0)
		(decf (iso-point-x slice-cursor) +tile-size+)))
	     ((= event 275)
	      (unless (<= (iso-point-z slice-cursor) 0)
		(decf (iso-point-z slice-cursor) +tile-size+)))
	     ((= event 276)
	      (unless (>= (ceiling (iso-point-z slice-cursor) +tile-size+)
			  (1- (room-depth)))
		(incf (iso-point-z slice-cursor) +tile-size+)))
	     ;; edit events
	     ((= event (char-code #\z))
	      (if (= (iso-point-y slice-cursor) -16)
		  (awhen (place-floor-tile slice-cursor cur-tile)
			 (setf dirty-floor-p t
			       unsaved-changes-p t))
		  (awhen (place-block slice-cursor cur-tile)
			 (setf unsaved-changes-p t))))
	     ((= event (char-code #\x))
	      (if (= (iso-point-y slice-cursor) -16)
		  (awhen (place-floor-tile slice-cursor 0)
			 (setf dirty-floor-p t
			       unsaved-changes-p t))
		  (awhen (remove-block slice-cursor)
			 (setf unsaved-changes-p t)))))

       (multiple-value-bind (x y) (iso-project-point slice-cursor)
	 (decf x (half (display-width)))
	 (decf y (half (display-height)))
	 (setf (car *camera*) (- x)
	       (cdr *camera*) (- y)))

       (maphash (lambda (id actor)
		  (declare (ignore id))
		  (update-sprite-coords (actor-sprite actor)
					(actor-position actor)
					actor))
		*actor-map*)

       (when dirty-floor-p
	 (paint-floor)
	 (setf dirty-floor-p nil))
       (room-redraw)
       (update-all-sprites)

       (if (= (iso-point-y slice-cursor) -16)
	   (setf (iso-point-y (box-dimensions cursor-box)) 16)
	   (setf (iso-point-y (box-dimensions cursor-box)) 32))
       (setf (box-position cursor-box) slice-cursor)

       (if (= (iso-point-y slice-cursor) -16)
	   (draw-top-cursor cursor-box)
	   (draw-debug-box cursor-box :partial t))

       (when *editor-osd-message*
	 (draw-status-message (cdr *editor-osd-message*)
			      100 100 140)
	 (decf (car *editor-osd-message*))
	 (when (zerop (car *editor-osd-message*))
	   (setf *editor-osd-message* nil)))
       (refresh-display))))
  
  (destroy-font)
  (destroy-sprite-manager))

(defun palette-mode ()
  (do ((cursor (cons 0 0))
       (max-row 3)
       (max-column 3))
      (nil)
    (fill-background 255)
    (dotimes (y max-row)
      (dotimes (x max-column)
	(awhen (tile-image (aref *tiles* (1+ (+ x (* y max-column)))))
	       (blit-image it nil (+ 10 (* 104 x)) (+ 55 (* 70 y))))
	(paint-blended-string (car (tile-archetype
				    (aref *tiles*
					  (1+ (+ x (* y max-column))))))
		      (+ 10 (* 104 x)) (+ 60 (* 70 y)) 220 220 255)))
    (sdl:draw-rectangle *vbuffer*
			(+ 8 (* 104 (car cursor)))
			(+ 10 (* 70 (cdr cursor)))
			84 64 255 255 255)
    (refresh-display)

    (let ((event (get-key-event)))
      ;; mode events; please excuse the silly hardcoded SDL keysyms.
      (cond ((= event 13) (return (+ 1 (car cursor)
				     (* (cdr cursor) max-column))))
	    ((= event 273) (when (plusp (cdr cursor)) (decf (cdr cursor))))
	    ((= event 274) (if (< (cdr cursor) (1- max-row))
			       (incf (cdr cursor))
			       (setf (cdr cursor) 0)))
	    ((= event 275) (if (< (car cursor) (1- max-column))
			       (incf (car cursor))
			       (setf (car cursor) 0)))
	    ((= event 276) (when (plusp (car cursor))
			     (decf (car cursor))))))))


;;;; USER-INTERFACE ROUTINES

(defvar *editor-osd-message* nil)

(defvar *editor-key-event* (with-foreign-object (event 'sdl:event) event))
(defun get-key-event ()
  (do ((rv #1=(sdl:wait-event *editor-key-event*) #1#))
      ((= rv 0))
    (let ((type (sdl:event-type *editor-key-event*)))
      (cond ((= type sdl:+key-down+)
	     (return (sdl:event-key-symbol *editor-key-event*)))))))

(defun editor-yes-no-prompt (message)
  (loop
   (draw-status-message message 128 128 128)
   (refresh-display)
   (let ((event (get-key-event)))
     (cond ((= event (char-code #\y)) (return t))
	   ((= event (char-code #\n)) (return nil))))))


(defun draw-status-message (message r g b)
  (sdl:draw-filled-rectangle *vbuffer* 8 (- (display-height) 32)
			     (- (display-width) 16) 24 r g b)
  (sdl:draw-rectangle *vbuffer* 8 (- (display-height) 32)
		      (- (display-width) 16) 24 32 32 32)
  (paint-blended-string message 10 (- (display-height) 30) 255 255 255))


(defun editor-osd-display-message (&rest arguments)
  (setf *editor-osd-message*
	(cons 1 (apply #'format (append (list nil) arguments)))))